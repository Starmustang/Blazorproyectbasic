@using Entity
@using Business
@inject B_Category bcategory
@inject B_Product bproduct
@inject B_Bodega bbodega
@inject B_Almacen balmacen
@inject NavigationManager NavManager



<EditForm Model="obodega">
	<div class="form-group">
		<label>Id de bodega</label>
		<InputText @bind-Value="obodega.BodegaId" />
	</div>

	<div class="form-group">
		<label>Cantidad de bodegas</label>
		<InputNumber @bind-Value="obodega.CantidadParcial" />
	</div>

	<div class="form-group">
		<label>Ultima actualizacion</label>
		<InputDate @bind-Value="obodega.UltimaActualizacion" />
	</div>

	<div class="form-group">
		<label>Producto</label>
		<InputSelect @bind-Value="obodega.ProductId">
			@foreach (var product in products)
			{
				<option value="@product.ProductId">@product.ProductName</option>
			}
		</InputSelect>
	</div>

	<div>
		<label>Almacen</label>
		<InputSelect @bind-Value="obodega.AlmacenId">
			@foreach (var almacen in almacenes)
			{
				<option value="@almacen.AlmacenId">@almacen.AlmacenName</option>
			}
		</InputSelect>
	</div>

	<input type="button" value="Actualizar bodega" style="margin-top: 10px;" @onclick=UpdateCategory />

</EditForm>

@code {
	[Parameter]
	public string IdBodega { get; set; }

	BodegaEntity obodega = new BodegaEntity();
	List<ProductEntity> products = new List<ProductEntity>();
	List<AlmacenEntity> almacenes = new List<AlmacenEntity>();

	protected override async Task OnInitializedAsync()
	{
		// oproduct = await bproduct.GetProductById(IdProduct);
		// ocategories = await bcategory.GetCategoryById(IdBodega);
		almacenes = await balmacen.GetAlmacenListAsync();
		products = await bproduct.GetProductListAsync();
		obodega = await bbodega.GetBodegaById(IdBodega);

	}

	private async void UpdateCategory()
	{
		// await bcategory.UpdateCategoryAsync(ocategories);
		await bbodega.UpdateBodegaAsync(obodega);
		NavManager.NavigateTo("bodega/list");
	}
}
