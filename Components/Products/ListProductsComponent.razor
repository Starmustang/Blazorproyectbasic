@using Entity
@using Business
@inject B_Product bproduct
@inject B_Category bcategory

<hr />
<select class="form-control" onchange="@CategoryChanged">
    <option value="">Seleccione categoria...</option>
    @foreach (var category in categories)
    {
        <option value="@category.categoryId">@category.categoryName</option>
    }
</select>
<hr />

<table class="table table-hover table-bordered">
    <thead>
        <tr>
            <th>Referencia</th>
            <th>Nombre producto</th>
            <th>Categoria</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in tempProducts)
        {
            <tr>
                <td>@product.ProductId</td>
                <td>@product.ProductName</td>
                <td>@product.categoryId</td>
                <td><a href="/product/update/@product.ProductId">Actualizar</a></td>
            </tr>
        }
    </tbody>
</table>

@message

@code {
    List<ProductEntity> products = new List<ProductEntity>();
    List<ProductEntity> tempProducts = new List<ProductEntity>();
    List<CategoryEntity> categories = new List<CategoryEntity>();

    string message;

    protected override async Task OnInitializedAsync()
    {
        products = await bproduct.GetProductListAsync();
        tempProducts = products;
        categories = await bcategory.GetCategoryListAsync();
    }

    private void CategoryChanged(ChangeEventArgs e)
    {
        //message = e.Value.ToString();
        tempProducts = products.Where(c => c.categoryId == e.Value.ToString()).ToList();
    }
}
